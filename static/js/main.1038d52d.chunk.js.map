{"version":3,"sources":["Coin.js","App.js","serviceWorker.js","index.js"],"names":["Coin","props","state","img_arr","heads","tails","count","currentImg","toss","bind","currentState","rand","Math","floor","random","console","log","this","setState","getHead","getTail","className","src","width","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRA2DeA,G,wDAvDX,WAAYC,GAAQ,IAAD,6BACf,cAAMA,IAKDC,MAAQ,CACTC,QALU,CACV,2CACA,4CAIAC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,WAAa,MAEjB,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBAbG,E,oDAgBXC,GACJ,MAAO,CACHN,MAAOM,EAAaN,MAAQ,EAC5BG,WAAYG,EAAaP,QAAQ,GACjCG,MAAQI,EAAaJ,MAAQ,K,8BAI7BI,GACJ,MAAO,CACHL,MAAOK,EAAaL,MAAQ,EAC5BE,WAAYG,EAAaP,QAAQ,GACjCG,MAAQI,EAAaJ,MAAQ,K,6BAKjC,IAAIK,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC3BC,QAAQC,IAAIL,GACC,IAATA,EACAM,KAAKC,SAASD,KAAKE,SAGnBF,KAAKC,SAASD,KAAKG,W,+BAKvB,OACI,yBAAKC,UAAU,QACX,iDACCJ,KAAKf,MAAMI,MAAQ,EAAI,yBAAKgB,IAAKL,KAAKf,MAAMK,WAAYgB,MAAM,QAAW,KAC1E,sCAAYN,KAAKf,MAAMI,MAAvB,IAA+BW,KAAKf,MAAMI,OAAS,EAAI,OAAS,QAAhE,sBAA4FW,KAAKf,MAAME,MAAvG,IAA+Ga,KAAKf,MAAME,OAAQ,EAAI,OAAS,QAA/I,QAA6Ja,KAAKf,MAAMG,MAAxK,KAAiLY,KAAKf,MAAMG,OAAQ,EAAI,OAAS,QAAjN,MACA,4BAAQmB,QAASP,KAAKT,MAAtB,gB,GAlDGiB,cCWJC,G,6KARP,OACI,yBAAKL,UAAU,OACX,kBAAC,EAAD,W,GAJEI,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.1038d52d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Coin.css'\r\n\r\nclass Coin extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        let img_arr = [\r\n            \"https://tinyurl.com/react-coin-heads-jpg\",\r\n            \"https://tinyurl.com/react-coin-tails-jpg\"\r\n        ]\r\n        this.state = {\r\n            img_arr: img_arr,\r\n            heads: 0,\r\n            tails: 0,\r\n            count: 0,\r\n            currentImg : null\r\n        }\r\n        this.toss = this.toss.bind(this);\r\n    }\r\n    \r\n    getHead(currentState) {\r\n        return {\r\n            heads: currentState.heads + 1,\r\n            currentImg: currentState.img_arr[0],\r\n            count : currentState.count + 1\r\n        }\r\n    }\r\n\r\n    getTail(currentState) {\r\n        return {\r\n            tails: currentState.tails + 1,\r\n            currentImg: currentState.img_arr[1],\r\n            count : currentState.count + 1\r\n        }\r\n    }\r\n\r\n    toss() {\r\n        let rand = Math.floor(Math.random() * 2);\r\n        console.log(rand);\r\n        if (rand === 0) {\r\n            this.setState(this.getHead);\r\n        }\r\n        else {\r\n            this.setState(this.getTail);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"coin\">\r\n                <h1>Let's flip a coin</h1>\r\n                {this.state.count > 0 ? <img src={this.state.currentImg} width=\"300\" /> : null}\r\n                <h3>Out of {this.state.count} {this.state.count <= 1 ? \"flip\" : \"flips\"} , there have been {this.state.heads} {this.state.heads<= 1 ? \"head\" : \"heads\"} and {this.state.tails}  {this.state.tails<= 1 ? \"tail\" : \"tails\"} !</h3>\r\n                <button onClick={this.toss}>Flip me</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Coin;","import React, { Component } from 'react';\r\nimport Coin from \"./Coin\";\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Coin/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}